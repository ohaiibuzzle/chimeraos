name: Build ChimeraOS image
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  workflow_call:
    inputs:
      postfix:
        type: string
        description: Postfix used in release.
        default: ''

jobs:
  build-system-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.build_image.outputs.version }}
      display_name: ${{ steps.build_image.outputs.display_name }}
      display_version: ${{ steps.build_image.outputs.display_version }}
      image_filename: ${{ steps.build_image.outputs.image_filename }}
    steps:
      - name: Maximize build space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/share/java
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /opt/az
          df -h
      - uses: actions/checkout@v3
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - uses: actions/download-artifact@v3
        with:
            name: AUR-packages
            path: aur-pkgs/
      - uses: actions/download-artifact@v3
        with:
            name: Packages
            path: pkgs/
      - name: Build system image
        id: build_image
        run: |
          docker pull ${{ steps.meta.outputs.tags }}
          docker run -u root --rm --entrypoint=/workdir/build-image.sh -v $(pwd):/workdir -v $(pwd)/output:/output -v $GITHUB_OUTPUT:$GITHUB_OUTPUT -e "GITHUB_OUTPUT=$GITHUB_OUTPUT" --privileged=true ${{ steps.meta.outputs.tags }} $(echo ${GITHUB_SHA} | cut -c1-7)
          echo -e "$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.meta.outputs.tags }})" > output/container.txt
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.build_image.outputs.version }}
          target_commitish: ${{ github.sha }}
          name: ${{ steps.build_image.outputs.display_name }} ${{ steps.build_image.outputs.display_version }} ${{ inputs.postfix }}
          draft: false
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            output/build_info.txt
            output/sha256sum.txt
            output/container.txt
      - name: Upload image to R2
        id: image_r2_upload
        env:
          RCLONE_CONFIG_R2_TYPE: "s3"
          RCLONE_CONFIG_R2_PROVIDER: "Cloudflare"
          RCLONE_CONFIG_R2_ENV_AUTH: true
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.RCLONE_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.RCLONE_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.RCLONE_ENDPOINT }}
          RCLONE_CONFIG_R2_NO_CHECK_BUCKET: true
        run: |
          sudo -v ; curl https://rclone.org/install.sh | sudo bash
          rclone copy output/${{ steps.build_image.outputs.image_filename }} r2:cachymera-os/
      - name: Setup tmate session on failure
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 60
        with:
          limit-access-to-actor: true
        
